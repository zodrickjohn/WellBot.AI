{"ast":null,"code":"var _jsxFileName = \"D:\\\\HealthDiagnoser-master\\\\src\\\\components\\\\BodyModel.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useGLTF, Html } from '@react-three/drei';\nimport { Suspense, useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Model({\n  setError,\n  onPartClick,\n  selectedParts\n}) {\n  _s();\n  const {\n    scene\n  } = useGLTF('public/assets/models/body-model.glb'); // ✅ move hook outside async\n  const [highlightedMeshes, setHighlightedMeshes] = useState(new Set());\n  const originalMaterials = useRef(new Map());\n  useEffect(() => {\n    try {\n      console.log('Model loaded from useGLTF');\n      console.log('Scene children:', scene.children.map(child => child.name));\n\n      // Scale and center\n      scene.scale.set(3, 3, 3);\n      scene.rotation.set(0, 0, 0);\n      const box = new THREE.Box3().setFromObject(scene);\n      const center = box.getCenter(new THREE.Vector3());\n      scene.position.sub(center);\n      scene.traverse(child => {\n        if (child.isMesh) {\n          console.log('Mesh:', child.name, 'Material:', child.material);\n          child.castShadow = true;\n          child.receiveShadow = true;\n          if (!child.material) {\n            child.material = new THREE.MeshStandardMaterial({\n              color: 0xaaaaaa\n            });\n          }\n          originalMaterials.current.set(child, child.material.clone());\n        }\n      });\n    } catch (err) {\n      console.error('Model processing error:', err);\n      setError(`Failed to process model: ${err.message}`);\n    }\n  }, [scene, setError]);\n  useEffect(() => {\n    if (!scene) return;\n    const newHighlightedMeshes = new Set();\n    scene.traverse(child => {\n      if (child.isMesh) {\n        const isSelected = selectedParts.includes(child.name);\n        if (isSelected) {\n          child.material = new THREE.MeshStandardMaterial({\n            color: 0x006400\n          });\n          newHighlightedMeshes.add(child);\n        } else {\n          const originalMaterial = originalMaterials.current.get(child);\n          if (originalMaterial) {\n            child.material = originalMaterial;\n          }\n        }\n      }\n    });\n    setHighlightedMeshes(newHighlightedMeshes);\n  }, [selectedParts, scene]);\n  const handleMeshClick = e => {\n    e.stopPropagation();\n    const mesh = e.object;\n    if (mesh.isMesh && mesh.name) {\n      console.log('Part clicked:', mesh.name);\n      onPartClick(mesh.name);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: scene,\n      onClick: handleMeshClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"/RdrUzTLwmp0Swv/vqzd8480oYM=\", false, function () {\n  return [useGLTF];\n});\n_c = Model;\nexport default function BodyModel({\n  onPartClick,\n  selectedParts\n}) {\n  _s2();\n  const [error, setError] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Html, {\n      center: true,\n      children: \"Loading model...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }, this),\n    children: error ? /*#__PURE__*/_jsxDEV(Html, {\n      center: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          maxWidth: '400px',\n          background: 'white',\n          padding: '20px',\n          borderRadius: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Error Loading Model\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Check:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"File exists at public/assets/models/body-model.glb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"File is a valid GLB format (binary, not UTF-8)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Server is running on localhost:3000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No network issues (e.g., firewall, VPN)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: 'File size is reasonable (e.g., <10MB)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Model, {\n      setError: setError,\n      onPartClick: onPartClick,\n      selectedParts: selectedParts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s2(BodyModel, \"A8i/78Fx3FIozbyR2zwnz0NK35o=\");\n_c2 = BodyModel;\nuseGLTF.preload('/assets/models/body-model.glb');\nvar _c, _c2;\n$RefreshReg$(_c, \"Model\");\n$RefreshReg$(_c2, \"BodyModel\");","map":{"version":3,"names":["useGLTF","Html","Suspense","useState","useEffect","useRef","THREE","jsxDEV","_jsxDEV","Model","setError","onPartClick","selectedParts","_s","scene","highlightedMeshes","setHighlightedMeshes","Set","originalMaterials","Map","console","log","children","map","child","name","scale","set","rotation","box","Box3","setFromObject","center","getCenter","Vector3","position","sub","traverse","isMesh","material","castShadow","receiveShadow","MeshStandardMaterial","color","current","clone","err","error","message","newHighlightedMeshes","isSelected","includes","add","originalMaterial","get","handleMeshClick","e","stopPropagation","mesh","object","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","BodyModel","_s2","fallback","style","maxWidth","background","padding","borderRadius","_c2","preload","$RefreshReg$"],"sources":["D:/HealthDiagnoser-master/src/components/BodyModel.js"],"sourcesContent":["import { useGLTF, Html } from '@react-three/drei';\nimport { Suspense, useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nfunction Model({ setError, onPartClick, selectedParts }) {\n  const { scene } = useGLTF('public/assets/models/body-model.glb'); // ✅ move hook outside async\n  const [highlightedMeshes, setHighlightedMeshes] = useState(new Set());\n  const originalMaterials = useRef(new Map());\n\n  useEffect(() => {\n    try {\n      console.log('Model loaded from useGLTF');\n      console.log('Scene children:', scene.children.map(child => child.name));\n\n      // Scale and center\n      scene.scale.set(3, 3, 3);\n      scene.rotation.set(0, 0, 0);\n\n      const box = new THREE.Box3().setFromObject(scene);\n      const center = box.getCenter(new THREE.Vector3());\n      scene.position.sub(center);\n\n      scene.traverse((child) => {\n        if (child.isMesh) {\n          console.log('Mesh:', child.name, 'Material:', child.material);\n          child.castShadow = true;\n          child.receiveShadow = true;\n          if (!child.material) {\n            child.material = new THREE.MeshStandardMaterial({ color: 0xaaaaaa });\n          }\n          originalMaterials.current.set(child, child.material.clone());\n        }\n      });\n    } catch (err) {\n      console.error('Model processing error:', err);\n      setError(`Failed to process model: ${err.message}`);\n    }\n  }, [scene, setError]);\n\n  useEffect(() => {\n    if (!scene) return;\n    const newHighlightedMeshes = new Set();\n\n    scene.traverse((child) => {\n      if (child.isMesh) {\n        const isSelected = selectedParts.includes(child.name);\n        if (isSelected) {\n          child.material = new THREE.MeshStandardMaterial({ color: 0x006400 });\n          newHighlightedMeshes.add(child);\n        } else {\n          const originalMaterial = originalMaterials.current.get(child);\n          if (originalMaterial) {\n            child.material = originalMaterial;\n          }\n        }\n      }\n    });\n    setHighlightedMeshes(newHighlightedMeshes);\n  }, [selectedParts, scene]);\n\n  const handleMeshClick = (e) => {\n    e.stopPropagation();\n    const mesh = e.object;\n    if (mesh.isMesh && mesh.name) {\n      console.log('Part clicked:', mesh.name);\n      onPartClick(mesh.name);\n    }\n  };\n\n  return (\n    <group>\n      <primitive object={scene} onClick={handleMeshClick} />\n    </group>\n  );\n}\n\nexport default function BodyModel({ onPartClick, selectedParts }) {\n  const [error, setError] = useState(null);\n\n  return (\n    <Suspense fallback={<Html center>Loading model...</Html>}>\n      {error ? (\n        <Html center>\n          <div style={{ color: 'red', maxWidth: '400px', background: 'white', padding: '20px', borderRadius: '8px' }}>\n            <h3>Error Loading Model</h3>\n            <p>{error}</p>\n            <p>Check:</p>\n            <ol>\n              <li>File exists at public/assets/models/body-model.glb</li>\n              <li>File is a valid GLB format (binary, not UTF-8)</li>\n              <li>Server is running on localhost:3000</li>\n              <li>No network issues (e.g., firewall, VPN)</li>\n              <li>{'File size is reasonable (e.g., <10MB)'}</li>\n            </ol>\n          </div>\n        </Html>\n      ) : (\n        <Model setError={setError} onPartClick={onPartClick} selectedParts={selectedParts} />\n      )}\n    </Suspense>\n  );\n}\n\nuseGLTF.preload('/assets/models/body-model.glb');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}