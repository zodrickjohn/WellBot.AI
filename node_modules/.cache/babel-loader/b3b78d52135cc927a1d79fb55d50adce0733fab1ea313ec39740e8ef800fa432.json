{"ast":null,"code":"var _jsxFileName = \"D:\\\\WellBot.AI\\\\src\\\\components\\\\BodyModel.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useGLTF, Html } from '@react-three/drei';\nimport { Suspense, useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Model({\n  setError,\n  onPartClick,\n  selectedParts\n}) {\n  _s2();\n  var _s = $RefreshSig$();\n  const [model, setModel] = useState(null);\n  const originalMaterials = useRef(new Map());\n  const loadModel = _s(useCallback(_s(async () => {\n    _s();\n    try {\n      console.log('Attempting to fetch model from /assets/models/body-model.glb');\n      const response = await fetch('/assets/models/body-model.glb', {\n        cache: 'no-store'\n      });\n      if (!response.ok) {\n        throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n      }\n      const gltf = await useGLTF('/assets/models/body-model.glb');\n      gltf.scene.scale.set(3, 3, 3);\n      gltf.scene.rotation.set(0, 0, 0);\n      const box = new THREE.Box3().setFromObject(gltf.scene);\n      const center = box.getCenter(new THREE.Vector3());\n      gltf.scene.position.sub(center);\n      gltf.scene.traverse(child => {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          if (!child.material) {\n            child.material = new THREE.MeshStandardMaterial({\n              color: 0xaaaaaa\n            });\n          }\n          originalMaterials.current.set(child, child.material.clone());\n        }\n      });\n      setModel(gltf);\n    } catch (err) {\n      console.error('Model loading error:', err);\n      setError(`Failed to load model: ${err.message}`);\n    }\n  }, \"32KrL5kPiaeJAX40F9P63Xol6XY=\", false, function () {\n    return [useGLTF];\n  }), [setError]), \"32KrL5kPiaeJAX40F9P63Xol6XY=\", false, function () {\n    return [useGLTF];\n  });\n  useEffect(() => {\n    loadModel();\n  }, [loadModel]);\n  useEffect(() => {\n    if (!model) return;\n    model.scene.traverse(child => {\n      if (child.isMesh) {\n        const isSelected = selectedParts.includes(child.name);\n        if (isSelected) {\n          child.material = new THREE.MeshStandardMaterial({\n            color: 0x006400\n          });\n        } else {\n          const originalMaterial = originalMaterials.current.get(child);\n          if (originalMaterial) {\n            child.material = originalMaterial;\n          }\n        }\n      }\n    });\n  }, [selectedParts, model]);\n  const handleMeshClick = useCallback(e => {\n    e.stopPropagation();\n    const mesh = e.object;\n    if (mesh.isMesh && mesh.name) {\n      console.log('Part clicked:', mesh.name);\n      onPartClick(mesh.name);\n    }\n  }, [onPartClick]);\n  if (!model) {\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n        args: [0.5, 0.5, 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: model.scene,\n      onClick: handleMeshClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s2(Model, \"BpjEG8iFb2oLU41Mz5QuKxmCZFo=\");\n_c = Model;\nexport default function BodyModel({\n  onPartClick,\n  selectedParts\n}) {\n  _s3();\n  const [error, setError] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Html, {\n      center: true,\n      children: \"Loading model...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }, this),\n    children: error ? /*#__PURE__*/_jsxDEV(Html, {\n      center: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          maxWidth: '400px',\n          background: 'black',\n          padding: '20px',\n          borderRadius: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Error Loading Model\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Check:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"File exists at public/assets/models/body-model.glb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"File is a valid GLB format (binary, not UTF-8)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Server is running on localhost:3000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No network issues (e.g., firewall, VPN)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: 'File size is reasonable (e.g., <10MB)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Model, {\n      setError: setError,\n      onPartClick: onPartClick,\n      selectedParts: selectedParts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s3(BodyModel, \"A8i/78Fx3FIozbyR2zwnz0NK35o=\");\n_c2 = BodyModel;\nuseGLTF.preload('/assets/models/body-model.glb');\nvar _c, _c2;\n$RefreshReg$(_c, \"Model\");\n$RefreshReg$(_c2, \"BodyModel\");","map":{"version":3,"names":["useGLTF","Html","Suspense","useState","useEffect","useRef","useCallback","THREE","jsxDEV","_jsxDEV","Model","setError","onPartClick","selectedParts","_s2","_s","$RefreshSig$","model","setModel","originalMaterials","Map","loadModel","console","log","response","fetch","cache","ok","Error","status","statusText","gltf","scene","scale","set","rotation","box","Box3","setFromObject","center","getCenter","Vector3","position","sub","traverse","child","isMesh","castShadow","receiveShadow","material","MeshStandardMaterial","color","current","clone","err","error","message","isSelected","includes","name","originalMaterial","get","handleMeshClick","e","stopPropagation","mesh","object","children","args","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","BodyModel","_s3","fallback","style","maxWidth","background","padding","borderRadius","_c2","preload","$RefreshReg$"],"sources":["D:/WellBot.AI/src/components/BodyModel.js"],"sourcesContent":["import { useGLTF, Html } from '@react-three/drei';\nimport { Suspense, useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\n\nfunction Model({ setError, onPartClick, selectedParts }) {\n  const [model, setModel] = useState(null);\n  const originalMaterials = useRef(new Map());\n\n  const loadModel = useCallback(async () => {\n    try {\n      console.log('Attempting to fetch model from /assets/models/body-model.glb');\n      const response = await fetch('/assets/models/body-model.glb', {\n        cache: 'no-store',\n      });\n      if (!response.ok) {\n        throw new Error(`Fetch failed: ${response.status} ${response.statusText}`);\n      }\n\n      const gltf = await useGLTF('/assets/models/body-model.glb');\n      gltf.scene.scale.set(3, 3, 3);\n      gltf.scene.rotation.set(0, 0, 0);\n\n      const box = new THREE.Box3().setFromObject(gltf.scene);\n      const center = box.getCenter(new THREE.Vector3());\n      gltf.scene.position.sub(center);\n\n      gltf.scene.traverse((child) => {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          if (!child.material) {\n            child.material = new THREE.MeshStandardMaterial({ color: 0xaaaaaa });\n          }\n          originalMaterials.current.set(child, child.material.clone());\n        }\n      });\n\n      setModel(gltf);\n    } catch (err) {\n      console.error('Model loading error:', err);\n      setError(`Failed to load model: ${err.message}`);\n    }\n  }, [setError]);\n\n  useEffect(() => {\n    loadModel();\n  }, [loadModel]);\n\n  useEffect(() => {\n    if (!model) return;\n\n    model.scene.traverse((child) => {\n      if (child.isMesh) {\n        const isSelected = selectedParts.includes(child.name);\n        if (isSelected) {\n          child.material = new THREE.MeshStandardMaterial({ color: 0x006400 });\n        } else {\n          const originalMaterial = originalMaterials.current.get(child);\n          if (originalMaterial) {\n            child.material = originalMaterial;\n          }\n        }\n      }\n    });\n  }, [selectedParts, model]);\n\n  const handleMeshClick = useCallback((e) => {\n    e.stopPropagation();\n    const mesh = e.object;\n    if (mesh.isMesh && mesh.name) {\n      console.log('Part clicked:', mesh.name);\n      onPartClick(mesh.name);\n    }\n  }, [onPartClick]);\n\n  if (!model) {\n    return (\n      <mesh position={[0, 0, 0]}>\n        <boxGeometry args={[0.5, 0.5, 0.5]} />\n        <meshStandardMaterial color=\"red\" />\n      </mesh>\n    );\n  }\n\n  return (\n    <group>\n      <primitive object={model.scene} onClick={handleMeshClick} />\n    </group>\n  );\n}\n\nexport default function BodyModel({ onPartClick, selectedParts }) {\n  const [error, setError] = useState(null);\n\n  return (\n    <Suspense fallback={<Html center>Loading model...</Html>}>\n      {error ? (\n        <Html center>\n          <div style={{ color: 'red', maxWidth: '400px', background: 'black', padding: '20px', borderRadius: '8px' }}>\n            <h3>Error Loading Model</h3>\n            <p>{error}</p>\n            <p>Check:</p>\n            <ol>\n              <li>File exists at public/assets/models/body-model.glb</li>\n              <li>File is a valid GLB format (binary, not UTF-8)</li>\n              <li>Server is running on localhost:3000</li>\n              <li>No network issues (e.g., firewall, VPN)</li>\n              <li>{'File size is reasonable (e.g., <10MB)'}</li>\n            </ol>\n          </div>\n        </Html>\n      ) : (\n        <Model setError={setError} onPartClick={onPartClick} selectedParts={selectedParts} />\n      )}\n    </Suspense>\n  );\n}\n\nuseGLTF.preload('/assets/models/body-model.glb');"],"mappings":";;;AAAA,SAASA,OAAO,EAAEC,IAAI,QAAQ,mBAAmB;AACjD,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAC1E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,KAAKA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAc,CAAC,EAAE;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACvD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMgB,iBAAiB,GAAGd,MAAM,CAAC,IAAIe,GAAG,CAAC,CAAC,CAAC;EAE3C,MAAMC,SAAS,GAAAN,EAAA,CAAGT,WAAW,CAAAS,EAAA,CAAC,YAAY;IAAAA,EAAA;IACxC,IAAI;MACFO,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC;MAC3E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,KAAK,EAAE;MACT,CAAC,CAAC;MACF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiBJ,QAAQ,CAACK,MAAM,IAAIL,QAAQ,CAACM,UAAU,EAAE,CAAC;MAC5E;MAEA,MAAMC,IAAI,GAAG,MAAM/B,OAAO,CAAC,+BAA+B,CAAC;MAC3D+B,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC7BH,IAAI,CAACC,KAAK,CAACG,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAEhC,MAAME,GAAG,GAAG,IAAI7B,KAAK,CAAC8B,IAAI,CAAC,CAAC,CAACC,aAAa,CAACP,IAAI,CAACC,KAAK,CAAC;MACtD,MAAMO,MAAM,GAAGH,GAAG,CAACI,SAAS,CAAC,IAAIjC,KAAK,CAACkC,OAAO,CAAC,CAAC,CAAC;MACjDV,IAAI,CAACC,KAAK,CAACU,QAAQ,CAACC,GAAG,CAACJ,MAAM,CAAC;MAE/BR,IAAI,CAACC,KAAK,CAACY,QAAQ,CAAEC,KAAK,IAAK;QAC7B,IAAIA,KAAK,CAACC,MAAM,EAAE;UAChBD,KAAK,CAACE,UAAU,GAAG,IAAI;UACvBF,KAAK,CAACG,aAAa,GAAG,IAAI;UAC1B,IAAI,CAACH,KAAK,CAACI,QAAQ,EAAE;YACnBJ,KAAK,CAACI,QAAQ,GAAG,IAAI1C,KAAK,CAAC2C,oBAAoB,CAAC;cAAEC,KAAK,EAAE;YAAS,CAAC,CAAC;UACtE;UACAhC,iBAAiB,CAACiC,OAAO,CAAClB,GAAG,CAACW,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC;QAC9D;MACF,CAAC,CAAC;MAEFnC,QAAQ,CAACa,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOuB,GAAG,EAAE;MACZhC,OAAO,CAACiC,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC;MAC1C3C,QAAQ,CAAC,yBAAyB2C,GAAG,CAACE,OAAO,EAAE,CAAC;IAClD;EACF,CAAC;IAAA,QAxBsBxD,OAAO;EAAA,IAwB3B,CAACW,QAAQ,CAAC,CAAC;IAAA,QAxBSX,OAAO;EAAA,EAwBhB;EAEdI,SAAS,CAAC,MAAM;IACdiB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEfjB,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,KAAK,EAAE;IAEZA,KAAK,CAACe,KAAK,CAACY,QAAQ,CAAEC,KAAK,IAAK;MAC9B,IAAIA,KAAK,CAACC,MAAM,EAAE;QAChB,MAAMW,UAAU,GAAG5C,aAAa,CAAC6C,QAAQ,CAACb,KAAK,CAACc,IAAI,CAAC;QACrD,IAAIF,UAAU,EAAE;UACdZ,KAAK,CAACI,QAAQ,GAAG,IAAI1C,KAAK,CAAC2C,oBAAoB,CAAC;YAAEC,KAAK,EAAE;UAAS,CAAC,CAAC;QACtE,CAAC,MAAM;UACL,MAAMS,gBAAgB,GAAGzC,iBAAiB,CAACiC,OAAO,CAACS,GAAG,CAAChB,KAAK,CAAC;UAC7D,IAAIe,gBAAgB,EAAE;YACpBf,KAAK,CAACI,QAAQ,GAAGW,gBAAgB;UACnC;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/C,aAAa,EAAEI,KAAK,CAAC,CAAC;EAE1B,MAAM6C,eAAe,GAAGxD,WAAW,CAAEyD,CAAC,IAAK;IACzCA,CAAC,CAACC,eAAe,CAAC,CAAC;IACnB,MAAMC,IAAI,GAAGF,CAAC,CAACG,MAAM;IACrB,IAAID,IAAI,CAACnB,MAAM,IAAImB,IAAI,CAACN,IAAI,EAAE;MAC5BrC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE0C,IAAI,CAACN,IAAI,CAAC;MACvC/C,WAAW,CAACqD,IAAI,CAACN,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAAC/C,WAAW,CAAC,CAAC;EAEjB,IAAI,CAACK,KAAK,EAAE;IACV,oBACER,OAAA;MAAMiC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAyB,QAAA,gBACxB1D,OAAA;QAAa2D,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtC/D,OAAA;QAAsB0C,KAAK,EAAC;MAAK;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAEX;EAEA,oBACE/D,OAAA;IAAA0D,QAAA,eACE1D,OAAA;MAAWyD,MAAM,EAAEjD,KAAK,CAACe,KAAM;MAACyC,OAAO,EAAEX;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEZ;AAAC1D,GAAA,CArFQJ,KAAK;AAAAgE,EAAA,GAALhE,KAAK;AAuFd,eAAe,SAASiE,SAASA,CAAC;EAAE/D,WAAW;EAAEC;AAAc,CAAC,EAAE;EAAA+D,GAAA;EAChE,MAAM,CAACrB,KAAK,EAAE5C,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,oBACEM,OAAA,CAACP,QAAQ;IAAC2E,QAAQ,eAAEpE,OAAA,CAACR,IAAI;MAACsC,MAAM;MAAA4B,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAE;IAAAL,QAAA,EACtDZ,KAAK,gBACJ9C,OAAA,CAACR,IAAI;MAACsC,MAAM;MAAA4B,QAAA,eACV1D,OAAA;QAAKqE,KAAK,EAAE;UAAE3B,KAAK,EAAE,KAAK;UAAE4B,QAAQ,EAAE,OAAO;UAAEC,UAAU,EAAE,OAAO;UAAEC,OAAO,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAM,CAAE;QAAAf,QAAA,gBACzG1D,OAAA;UAAA0D,QAAA,EAAI;QAAmB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5B/D,OAAA;UAAA0D,QAAA,EAAIZ;QAAK;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACd/D,OAAA;UAAA0D,QAAA,EAAG;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACb/D,OAAA;UAAA0D,QAAA,gBACE1D,OAAA;YAAA0D,QAAA,EAAI;UAAkD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3D/D,OAAA;YAAA0D,QAAA,EAAI;UAA8C;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvD/D,OAAA;YAAA0D,QAAA,EAAI;UAAmC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5C/D,OAAA;YAAA0D,QAAA,EAAI;UAAuC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChD/D,OAAA;YAAA0D,QAAA,EAAK;UAAuC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAEP/D,OAAA,CAACC,KAAK;MAACC,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAACC,aAAa,EAAEA;IAAc;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACrF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEf;AAACI,GAAA,CAzBuBD,SAAS;AAAAQ,GAAA,GAATR,SAAS;AA2BjC3E,OAAO,CAACoF,OAAO,CAAC,+BAA+B,CAAC;AAAC,IAAAV,EAAA,EAAAS,GAAA;AAAAE,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAF,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}